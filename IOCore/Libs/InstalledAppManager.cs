using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Management.Deployment;
using System.Linq;

namespace IOCore.Libs
{
    public class InstalledAppManager
    {
        private InstalledAppManager() { }

        private static readonly Lazy<InstalledAppManager> lazy = new(() => new());
        public static InstalledAppManager Inst => lazy.Value;

        public class InstalledApp
        {
            public string Entry;
            public string Name;
            public string Publisher = null;
        }

        private static readonly string[] FILTERED_EXTENSIONS =
        {
            ".html",
            ".htm",
            ".url",
            ".txt",
            ".chm",
            ".uninst.exe",
            "uninstall.exe",
            "unins000.exe",
            "microsoft.autogenerated.",
        };

        private static bool IsValidApp(string appId)
        {
            return !Utils.IsValidUrl(appId) && !FILTERED_EXTENSIONS.Any(appId.ToLowerInvariant().Contains);
        }

        public readonly object Lock = new();

        public List<InstalledApp> InstalledApps { get; private set; }

        public void LoadAsync(IProgress<bool> progress)
        {
            lock (Lock)
            {
                if (InstalledApps != null)
                {
                    progress?.Report(true);
                    return;
                }
            }

            Task.Run(() =>
            {
                lock (Lock)
                {
                    if (InstalledApps == null)
                    {
                        string[] appNames;
                        string[] appIds;

                        var hasError = false;

                        var process = new Process
                        {
                            StartInfo = new ProcessStartInfo()
                            {
                                FileName = "powershell.exe",
                                UseShellExecute = false,
                                RedirectStandardOutput = true,
                                RedirectStandardError = true,
                                CreateNoWindow = true,
                                WindowStyle = ProcessWindowStyle.Hidden,
                                Arguments = "Get-StartApps | Select-Object Name"
                            }
                        };

                        process.ErrorDataReceived += (object sender, DataReceivedEventArgs e) => { hasError = true; };

                        //

                        process.Start();
                        if (hasError) return;

                        appNames = process.StandardOutput.ReadToEnd().Split("\n");

                        //

                        process.StartInfo.Arguments = "Get-StartApps | Select-Object AppId";

                        process.Start();
                        if (hasError) return;

                        appIds = process.StandardOutput.ReadToEnd().Split("\n");

                        process.Dispose();

                        if (appNames.Length != appIds.Length) return;

                        var packages = new PackageManager().FindPackagesForUser(string.Empty);

                        InstalledApps = new();

                        for (var i = 3; i < appIds.Length; i++)
                        {
                            if (!IsValidApp(appIds[i]) ||
                                string.IsNullOrWhiteSpace(appNames[i]) || string.IsNullOrWhiteSpace(appIds[i])) continue;

                            var item = new InstalledApp
                            {
                                Entry = appIds[i].Trim(),
                                Name = appNames[i].Trim()
                            };

                            if (item.Entry.Contains('!'))
                            {
                                var package = packages.Where(i => item.Entry.Contains(i.Id.Name)).FirstOrDefault();
                                if (package != null)
                                    item.Publisher = package.PublisherDisplayName;
                            }

                            InstalledApps.Add(item);
                        }
                    }

                    progress?.Report(InstalledApps != null);
                }
            });
        }
    }
}